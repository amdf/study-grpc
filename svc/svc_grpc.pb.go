// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: svc/svc.proto

package svc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimpleServiceClient is the client API for SimpleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleServiceClient interface {
	SimpleFunction(ctx context.Context, in *SimpleQuery, opts ...grpc.CallOption) (*SimpleResponse, error)
	GenerateWords(ctx context.Context, in *WantWords, opts ...grpc.CallOption) (SimpleService_GenerateWordsClient, error)
	Sum(ctx context.Context, opts ...grpc.CallOption) (SimpleService_SumClient, error)
	Exchange(ctx context.Context, opts ...grpc.CallOption) (SimpleService_ExchangeClient, error)
}

type simpleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleServiceClient(cc grpc.ClientConnInterface) SimpleServiceClient {
	return &simpleServiceClient{cc}
}

func (c *simpleServiceClient) SimpleFunction(ctx context.Context, in *SimpleQuery, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/svc.SimpleService/SimpleFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) GenerateWords(ctx context.Context, in *WantWords, opts ...grpc.CallOption) (SimpleService_GenerateWordsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SimpleService_ServiceDesc.Streams[0], "/svc.SimpleService/GenerateWords", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleServiceGenerateWordsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SimpleService_GenerateWordsClient interface {
	Recv() (*Word, error)
	grpc.ClientStream
}

type simpleServiceGenerateWordsClient struct {
	grpc.ClientStream
}

func (x *simpleServiceGenerateWordsClient) Recv() (*Word, error) {
	m := new(Word)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simpleServiceClient) Sum(ctx context.Context, opts ...grpc.CallOption) (SimpleService_SumClient, error) {
	stream, err := c.cc.NewStream(ctx, &SimpleService_ServiceDesc.Streams[1], "/svc.SimpleService/Sum", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleServiceSumClient{stream}
	return x, nil
}

type SimpleService_SumClient interface {
	Send(*Number) error
	CloseAndRecv() (*SumResult, error)
	grpc.ClientStream
}

type simpleServiceSumClient struct {
	grpc.ClientStream
}

func (x *simpleServiceSumClient) Send(m *Number) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleServiceSumClient) CloseAndRecv() (*SumResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SumResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simpleServiceClient) Exchange(ctx context.Context, opts ...grpc.CallOption) (SimpleService_ExchangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SimpleService_ServiceDesc.Streams[2], "/svc.SimpleService/Exchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleServiceExchangeClient{stream}
	return x, nil
}

type SimpleService_ExchangeClient interface {
	Send(*SomeText) error
	Recv() (*SomeText, error)
	grpc.ClientStream
}

type simpleServiceExchangeClient struct {
	grpc.ClientStream
}

func (x *simpleServiceExchangeClient) Send(m *SomeText) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleServiceExchangeClient) Recv() (*SomeText, error) {
	m := new(SomeText)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimpleServiceServer is the server API for SimpleService service.
// All implementations must embed UnimplementedSimpleServiceServer
// for forward compatibility
type SimpleServiceServer interface {
	SimpleFunction(context.Context, *SimpleQuery) (*SimpleResponse, error)
	GenerateWords(*WantWords, SimpleService_GenerateWordsServer) error
	Sum(SimpleService_SumServer) error
	Exchange(SimpleService_ExchangeServer) error
	mustEmbedUnimplementedSimpleServiceServer()
}

// UnimplementedSimpleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleServiceServer struct {
}

func (UnimplementedSimpleServiceServer) SimpleFunction(context.Context, *SimpleQuery) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleFunction not implemented")
}
func (UnimplementedSimpleServiceServer) GenerateWords(*WantWords, SimpleService_GenerateWordsServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateWords not implemented")
}
func (UnimplementedSimpleServiceServer) Sum(SimpleService_SumServer) error {
	return status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedSimpleServiceServer) Exchange(SimpleService_ExchangeServer) error {
	return status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedSimpleServiceServer) mustEmbedUnimplementedSimpleServiceServer() {}

// UnsafeSimpleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleServiceServer will
// result in compilation errors.
type UnsafeSimpleServiceServer interface {
	mustEmbedUnimplementedSimpleServiceServer()
}

func RegisterSimpleServiceServer(s grpc.ServiceRegistrar, srv SimpleServiceServer) {
	s.RegisterService(&SimpleService_ServiceDesc, srv)
}

func _SimpleService_SimpleFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).SimpleFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svc.SimpleService/SimpleFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).SimpleFunction(ctx, req.(*SimpleQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleService_GenerateWords_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WantWords)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimpleServiceServer).GenerateWords(m, &simpleServiceGenerateWordsServer{stream})
}

type SimpleService_GenerateWordsServer interface {
	Send(*Word) error
	grpc.ServerStream
}

type simpleServiceGenerateWordsServer struct {
	grpc.ServerStream
}

func (x *simpleServiceGenerateWordsServer) Send(m *Word) error {
	return x.ServerStream.SendMsg(m)
}

func _SimpleService_Sum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleServiceServer).Sum(&simpleServiceSumServer{stream})
}

type SimpleService_SumServer interface {
	SendAndClose(*SumResult) error
	Recv() (*Number, error)
	grpc.ServerStream
}

type simpleServiceSumServer struct {
	grpc.ServerStream
}

func (x *simpleServiceSumServer) SendAndClose(m *SumResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleServiceSumServer) Recv() (*Number, error) {
	m := new(Number)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SimpleService_Exchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleServiceServer).Exchange(&simpleServiceExchangeServer{stream})
}

type SimpleService_ExchangeServer interface {
	Send(*SomeText) error
	Recv() (*SomeText, error)
	grpc.ServerStream
}

type simpleServiceExchangeServer struct {
	grpc.ServerStream
}

func (x *simpleServiceExchangeServer) Send(m *SomeText) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleServiceExchangeServer) Recv() (*SomeText, error) {
	m := new(SomeText)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimpleService_ServiceDesc is the grpc.ServiceDesc for SimpleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.SimpleService",
	HandlerType: (*SimpleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleFunction",
			Handler:    _SimpleService_SimpleFunction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateWords",
			Handler:       _SimpleService_GenerateWords_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Sum",
			Handler:       _SimpleService_Sum_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Exchange",
			Handler:       _SimpleService_Exchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "svc/svc.proto",
}
